// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.20.3
// source: protos/edge/data/deal.proto

package data

import (
	gopb "github.com/xefino/protobuf-gen-go/gopb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type describes the type of deal the enum value is associated with
type Deal_Type int32

const (
	Deal_Buy                    Deal_Type = 0
	Deal_Sell                   Deal_Type = 1
	Deal_Balance                Deal_Type = 2
	Deal_Credit                 Deal_Type = 3
	Deal_Charge                 Deal_Type = 4 // Additional charge
	Deal_Correction             Deal_Type = 5
	Deal_Bonus                  Deal_Type = 6
	Deal_Commission             Deal_Type = 7  // Additional commission
	Deal_CommissionDaily        Deal_Type = 8  // Daily commission
	Deal_CommissionMonthly      Deal_Type = 9  // Monthly commission
	Deal_CommissionAgentDaily   Deal_Type = 10 // Daily agent commission
	Deal_CommissionAgentMonthly Deal_Type = 11 // Monthly agent commission
	Deal_Interest               Deal_Type = 12 // Interest rate
	Deal_BuyCancelled           Deal_Type = 13 // Canceled buy deal. There can be a situation when a previously executed buy deal is canceled. In this case, the type of the previously executed deal (Buy) is changed to BuyCancelled,
	// and its profit/loss is zeroized. Previously obtained profit/loss is charged/withdrawn using a separated balance operation
	Deal_SellCancelled Deal_Type = 14 // Canceled sell deal. There can be a situation when a previously executed sell deal is canceled. In this case, the type of the previously executed deal (Sell) is changed to SellCancelled,
	// and its profit/loss is zeroized. Previously obtained profit/loss is charged/withdrawn using a separated balance operation
	Deal_Dividend Deal_Type = 15 // Dividend operations
	Deal_Franked  Deal_Type = 16 // Franked (non-taxable) dividend operations
	Deal_Tax      Deal_Type = 17 // Tax charges
)

// Enum value maps for Deal_Type.
var (
	Deal_Type_name = map[int32]string{
		0:  "Buy",
		1:  "Sell",
		2:  "Balance",
		3:  "Credit",
		4:  "Charge",
		5:  "Correction",
		6:  "Bonus",
		7:  "Commission",
		8:  "CommissionDaily",
		9:  "CommissionMonthly",
		10: "CommissionAgentDaily",
		11: "CommissionAgentMonthly",
		12: "Interest",
		13: "BuyCancelled",
		14: "SellCancelled",
		15: "Dividend",
		16: "Franked",
		17: "Tax",
	}
	Deal_Type_value = map[string]int32{
		"Buy":                    0,
		"Sell":                   1,
		"Balance":                2,
		"Credit":                 3,
		"Charge":                 4,
		"Correction":             5,
		"Bonus":                  6,
		"Commission":             7,
		"CommissionDaily":        8,
		"CommissionMonthly":      9,
		"CommissionAgentDaily":   10,
		"CommissionAgentMonthly": 11,
		"Interest":               12,
		"BuyCancelled":           13,
		"SellCancelled":          14,
		"Dividend":               15,
		"Franked":                16,
		"Tax":                    17,
	}
)

func (x Deal_Type) Enum() *Deal_Type {
	p := new(Deal_Type)
	*p = x
	return p
}

func (x Deal_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deal_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_edge_data_deal_proto_enumTypes[0].Descriptor()
}

func (Deal_Type) Type() protoreflect.EnumType {
	return &file_protos_edge_data_deal_proto_enumTypes[0]
}

func (x Deal_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deal_Type.Descriptor instead.
func (Deal_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_edge_data_deal_proto_rawDescGZIP(), []int{0, 0}
}

// Entry describes the direction of the deal
type Deal_Entry int32

const (
	Deal_In      Deal_Entry = 0 // Entry in
	Deal_Out     Deal_Entry = 1 // Entry out
	Deal_Reverse Deal_Entry = 2
	Deal_OutBy   Deal_Entry = 3 // Close a position by an opposite one
)

// Enum value maps for Deal_Entry.
var (
	Deal_Entry_name = map[int32]string{
		0: "In",
		1: "Out",
		2: "Reverse",
		3: "OutBy",
	}
	Deal_Entry_value = map[string]int32{
		"In":      0,
		"Out":     1,
		"Reverse": 2,
		"OutBy":   3,
	}
)

func (x Deal_Entry) Enum() *Deal_Entry {
	p := new(Deal_Entry)
	*p = x
	return p
}

func (x Deal_Entry) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deal_Entry) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_edge_data_deal_proto_enumTypes[1].Descriptor()
}

func (Deal_Entry) Type() protoreflect.EnumType {
	return &file_protos_edge_data_deal_proto_enumTypes[1]
}

func (x Deal_Entry) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deal_Entry.Descriptor instead.
func (Deal_Entry) EnumDescriptor() ([]byte, []int) {
	return file_protos_edge_data_deal_proto_rawDescGZIP(), []int{0, 1}
}

// Reason describes the origination of the deal
type Deal_Reason int32

const (
	Deal_Client     Deal_Reason = 0 // The deal was executed as a result of activation of an order placed from a desktop terminal
	Deal_Mobile     Deal_Reason = 1 // The deal was executed as a result of activation of an order placed from a mobile application
	Deal_Web        Deal_Reason = 2 // The deal was executed as a result of activation of an order placed from the web platform
	Deal_Strategy   Deal_Reason = 3 // The deal was executed as a result of activation of an order placed from a strategy, i.e. an Expert Advisor or a script
	Deal_StopLoss   Deal_Reason = 4 // The deal was executed as a result of Stop Loss activation
	Deal_TakeProfit Deal_Reason = 5 // The deal was executed as a result of Take Profit activation
	Deal_StopOut    Deal_Reason = 6 // The deal was executed as a result of the Stop Out event
	Deal_Rollover   Deal_Reason = 7 // The deal was executed due to a rollover
	Deal_Margin     Deal_Reason = 8 // The deal was executed after charging the variation margin
	Deal_Split      Deal_Reason = 9 // The deal was executed after the split (price reduction) of an instrument, which had an open position during split announcement
)

// Enum value maps for Deal_Reason.
var (
	Deal_Reason_name = map[int32]string{
		0: "Client",
		1: "Mobile",
		2: "Web",
		3: "Strategy",
		4: "StopLoss",
		5: "TakeProfit",
		6: "StopOut",
		7: "Rollover",
		8: "Margin",
		9: "Split",
	}
	Deal_Reason_value = map[string]int32{
		"Client":     0,
		"Mobile":     1,
		"Web":        2,
		"Strategy":   3,
		"StopLoss":   4,
		"TakeProfit": 5,
		"StopOut":    6,
		"Rollover":   7,
		"Margin":     8,
		"Split":      9,
	}
)

func (x Deal_Reason) Enum() *Deal_Reason {
	p := new(Deal_Reason)
	*p = x
	return p
}

func (x Deal_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deal_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_edge_data_deal_proto_enumTypes[2].Descriptor()
}

func (Deal_Reason) Type() protoreflect.EnumType {
	return &file_protos_edge_data_deal_proto_enumTypes[2]
}

func (x Deal_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deal_Reason.Descriptor instead.
func (Deal_Reason) EnumDescriptor() ([]byte, []int) {
	return file_protos_edge_data_deal_proto_rawDescGZIP(), []int{0, 2}
}

// Deal represents the data generated by the trade system that affects a position. It may be generated when an
// order is placed, but it could be generated for other reasons as well.
type Deal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // Deal ID. Unique number assigned to each deal
	OrderId    uint64        `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`         // Deal order number
	Symbol     string        `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`                           // Deal symbol
	ExternalId string        `protobuf:"bytes,4,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"` // Deal identifier in an external trading system (on the Exchange)
	Volume     *gopb.Decimal `protobuf:"bytes,5,opt,name=volume,proto3" json:"volume,omitempty"`                           // Deal volume
	Price      *gopb.Decimal `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`                             // Deal price
	Commission *gopb.Decimal `protobuf:"bytes,7,opt,name=commission,proto3" json:"commission,omitempty"`                   // Deal commission
	Swap       *gopb.Decimal `protobuf:"bytes,8,opt,name=swap,proto3" json:"swap,omitempty"`                               // Cumulative swap on close
	Profit     *gopb.Decimal `protobuf:"bytes,9,opt,name=profit,proto3" json:"profit,omitempty"`                           // Deal profit
	Fee        *gopb.Decimal `protobuf:"bytes,10,opt,name=fee,proto3" json:"fee,omitempty"`                                // Fee for making a deal charged immediately after performing a deal
	StopLoss   *gopb.Decimal `protobuf:"bytes,11,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`      // Stop Loss level. Entry and reversal deals use the Stop Loss values from the original order based on which the position was opened or reversed
	// Exit deals use the Stop Loss of a position as at the time of position closing
	TakeProfit *gopb.Decimal `protobuf:"bytes,12,opt,name=take_profit,json=takeProfit,proto3" json:"take_profit,omitempty"` // Take Profit level. Entry and reversal deals use the Take Profit values from the original order based on which the position was opened or reversed
	// Exit deals use the Take Profit value of a position as at the time of position closing
	Time        *gopb.UnixTimestamp `protobuf:"bytes,13,opt,name=time,proto3" json:"time,omitempty"`                                                  // Deal time
	Type        Deal_Type           `protobuf:"varint,14,opt,name=type,proto3,enum=protos.edge.data.Deal_Type" json:"type,omitempty"`                 // Deal type
	Entry       Deal_Entry          `protobuf:"varint,15,opt,name=entry,proto3,enum=protos.edge.data.Deal_Entry" json:"entry,omitempty"`              // Deal entry - entry in, entry out, reverse
	Origination Deal_Reason         `protobuf:"varint,16,opt,name=origination,proto3,enum=protos.edge.data.Deal_Reason" json:"origination,omitempty"` // The reason or source for deal execution
	Comment     string              `protobuf:"bytes,17,opt,name=comment,proto3" json:"comment,omitempty"`                                            // Deal comment
	PositionId  uint64              `protobuf:"varint,18,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`                   // Identifier of a position, in the opening, modification or closing of which this deal took part. Each position has a unique identifier that is assigned to all deals executed for the symbol
}

func (x *Deal) Reset() {
	*x = Deal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_edge_data_deal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deal) ProtoMessage() {}

func (x *Deal) ProtoReflect() protoreflect.Message {
	mi := &file_protos_edge_data_deal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deal.ProtoReflect.Descriptor instead.
func (*Deal) Descriptor() ([]byte, []int) {
	return file_protos_edge_data_deal_proto_rawDescGZIP(), []int{0}
}

func (x *Deal) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Deal) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Deal) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Deal) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Deal) GetVolume() *gopb.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *Deal) GetPrice() *gopb.Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Deal) GetCommission() *gopb.Decimal {
	if x != nil {
		return x.Commission
	}
	return nil
}

func (x *Deal) GetSwap() *gopb.Decimal {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *Deal) GetProfit() *gopb.Decimal {
	if x != nil {
		return x.Profit
	}
	return nil
}

func (x *Deal) GetFee() *gopb.Decimal {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Deal) GetStopLoss() *gopb.Decimal {
	if x != nil {
		return x.StopLoss
	}
	return nil
}

func (x *Deal) GetTakeProfit() *gopb.Decimal {
	if x != nil {
		return x.TakeProfit
	}
	return nil
}

func (x *Deal) GetTime() *gopb.UnixTimestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Deal) GetType() Deal_Type {
	if x != nil {
		return x.Type
	}
	return Deal_Buy
}

func (x *Deal) GetEntry() Deal_Entry {
	if x != nil {
		return x.Entry
	}
	return Deal_In
}

func (x *Deal) GetOrigination() Deal_Reason {
	if x != nil {
		return x.Origination
	}
	return Deal_Client
}

func (x *Deal) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Deal) GetPositionId() uint64 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

var File_protos_edge_data_deal_proto protoreflect.FileDescriptor

var file_protos_edge_data_deal_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x64, 0x65, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x09, 0x0a, 0x04, 0x44, 0x65, 0x61, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x77, 0x61,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x33, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x65, 0x61, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x61,
	0x6c, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xa2, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x75, 0x79,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x75, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10,
	0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x10, 0x0f, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x61, 0x78, 0x10, 0x11, 0x22, 0x30, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x06,
	0x0a, 0x02, 0x49, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x75, 0x74, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x75, 0x74, 0x42, 0x79, 0x10, 0x03, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x65,
	0x62, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x10,
	0x09, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x78, 0x65, 0x66, 0x69, 0x6e, 0x6f, 0x2f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x2d, 0x63,
	0x6c, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_protos_edge_data_deal_proto_rawDescOnce sync.Once
	file_protos_edge_data_deal_proto_rawDescData = file_protos_edge_data_deal_proto_rawDesc
)

func file_protos_edge_data_deal_proto_rawDescGZIP() []byte {
	file_protos_edge_data_deal_proto_rawDescOnce.Do(func() {
		file_protos_edge_data_deal_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_edge_data_deal_proto_rawDescData)
	})
	return file_protos_edge_data_deal_proto_rawDescData
}

var file_protos_edge_data_deal_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_edge_data_deal_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_protos_edge_data_deal_proto_goTypes = []interface{}{
	(Deal_Type)(0),             // 0: protos.edge.data.Deal.Type
	(Deal_Entry)(0),            // 1: protos.edge.data.Deal.Entry
	(Deal_Reason)(0),           // 2: protos.edge.data.Deal.Reason
	(*Deal)(nil),               // 3: protos.edge.data.Deal
	(*gopb.Decimal)(nil),       // 4: protos.common.Decimal
	(*gopb.UnixTimestamp)(nil), // 5: protos.common.UnixTimestamp
}
var file_protos_edge_data_deal_proto_depIdxs = []int32{
	4,  // 0: protos.edge.data.Deal.volume:type_name -> protos.common.Decimal
	4,  // 1: protos.edge.data.Deal.price:type_name -> protos.common.Decimal
	4,  // 2: protos.edge.data.Deal.commission:type_name -> protos.common.Decimal
	4,  // 3: protos.edge.data.Deal.swap:type_name -> protos.common.Decimal
	4,  // 4: protos.edge.data.Deal.profit:type_name -> protos.common.Decimal
	4,  // 5: protos.edge.data.Deal.fee:type_name -> protos.common.Decimal
	4,  // 6: protos.edge.data.Deal.stop_loss:type_name -> protos.common.Decimal
	4,  // 7: protos.edge.data.Deal.take_profit:type_name -> protos.common.Decimal
	5,  // 8: protos.edge.data.Deal.time:type_name -> protos.common.UnixTimestamp
	0,  // 9: protos.edge.data.Deal.type:type_name -> protos.edge.data.Deal.Type
	1,  // 10: protos.edge.data.Deal.entry:type_name -> protos.edge.data.Deal.Entry
	2,  // 11: protos.edge.data.Deal.origination:type_name -> protos.edge.data.Deal.Reason
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protos_edge_data_deal_proto_init() }
func file_protos_edge_data_deal_proto_init() {
	if File_protos_edge_data_deal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_edge_data_deal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_edge_data_deal_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_edge_data_deal_proto_goTypes,
		DependencyIndexes: file_protos_edge_data_deal_proto_depIdxs,
		EnumInfos:         file_protos_edge_data_deal_proto_enumTypes,
		MessageInfos:      file_protos_edge_data_deal_proto_msgTypes,
	}.Build()
	File_protos_edge_data_deal_proto = out.File
	file_protos_edge_data_deal_proto_rawDesc = nil
	file_protos_edge_data_deal_proto_goTypes = nil
	file_protos_edge_data_deal_proto_depIdxs = nil
}

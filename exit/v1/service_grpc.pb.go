// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: protos/edge/exit/v1/service.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	data "github.com/xefino/quantum-cli-go/data"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExitService_GetName_FullMethodName    = "/protos.edge.exit.v1.ExitService/GetName"
	ExitService_Enabled_FullMethodName    = "/protos.edge.exit.v1.ExitService/Enabled"
	ExitService_ShouldExit_FullMethodName = "/protos.edge.exit.v1.ExitService/ShouldExit"
)

// ExitServiceClient is the client API for ExitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExitServiceClient interface {
	// GetName retrieves an identifier associated with the service, allowing the strategy runner to
	// uniquely identify it when multiple filter services are being referenced. It will return a
	// name result showing the address, ID and human-readable name of the filter service that processed
	// the original request.
	GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.NameResult, error)
	// Enabled determines whether or not the service is enabled, allowing the strategy runner to skip
	// exit rules for all the positions at a given time.
	Enabled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.EnabledResult, error)
	// ShouldExit determines whether or not a position should be exited, using the data contained in
	// the ExitRequest. This endpoint will return an ExitResult, that shows the exit decision and the
	// order that should be submitted to the trade service.
	ShouldExit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*ExitResult, error)
}

type exitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExitServiceClient(cc grpc.ClientConnInterface) ExitServiceClient {
	return &exitServiceClient{cc}
}

func (c *exitServiceClient) GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.NameResult, error) {
	out := new(data.NameResult)
	err := c.cc.Invoke(ctx, ExitService_GetName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exitServiceClient) Enabled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.EnabledResult, error) {
	out := new(data.EnabledResult)
	err := c.cc.Invoke(ctx, ExitService_Enabled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exitServiceClient) ShouldExit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*ExitResult, error) {
	out := new(ExitResult)
	err := c.cc.Invoke(ctx, ExitService_ShouldExit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExitServiceServer is the server API for ExitService service.
// All implementations must embed UnimplementedExitServiceServer
// for forward compatibility
type ExitServiceServer interface {
	// GetName retrieves an identifier associated with the service, allowing the strategy runner to
	// uniquely identify it when multiple filter services are being referenced. It will return a
	// name result showing the address, ID and human-readable name of the filter service that processed
	// the original request.
	GetName(context.Context, *empty.Empty) (*data.NameResult, error)
	// Enabled determines whether or not the service is enabled, allowing the strategy runner to skip
	// exit rules for all the positions at a given time.
	Enabled(context.Context, *empty.Empty) (*data.EnabledResult, error)
	// ShouldExit determines whether or not a position should be exited, using the data contained in
	// the ExitRequest. This endpoint will return an ExitResult, that shows the exit decision and the
	// order that should be submitted to the trade service.
	ShouldExit(context.Context, *ExitRequest) (*ExitResult, error)
	mustEmbedUnimplementedExitServiceServer()
}

// UnimplementedExitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExitServiceServer struct {
}

func (UnimplementedExitServiceServer) GetName(context.Context, *empty.Empty) (*data.NameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedExitServiceServer) Enabled(context.Context, *empty.Empty) (*data.EnabledResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enabled not implemented")
}
func (UnimplementedExitServiceServer) ShouldExit(context.Context, *ExitRequest) (*ExitResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldExit not implemented")
}
func (UnimplementedExitServiceServer) mustEmbedUnimplementedExitServiceServer() {}

// UnsafeExitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExitServiceServer will
// result in compilation errors.
type UnsafeExitServiceServer interface {
	mustEmbedUnimplementedExitServiceServer()
}

func RegisterExitServiceServer(s grpc.ServiceRegistrar, srv ExitServiceServer) {
	s.RegisterService(&ExitService_ServiceDesc, srv)
}

func _ExitService_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExitServiceServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExitService_GetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExitServiceServer).GetName(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExitService_Enabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExitServiceServer).Enabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExitService_Enabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExitServiceServer).Enabled(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExitService_ShouldExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExitServiceServer).ShouldExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExitService_ShouldExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExitServiceServer).ShouldExit(ctx, req.(*ExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExitService_ServiceDesc is the grpc.ServiceDesc for ExitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.edge.exit.v1.ExitService",
	HandlerType: (*ExitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _ExitService_GetName_Handler,
		},
		{
			MethodName: "Enabled",
			Handler:    _ExitService_Enabled_Handler,
		},
		{
			MethodName: "ShouldExit",
			Handler:    _ExitService_ShouldExit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/edge/exit/v1/service.proto",
}

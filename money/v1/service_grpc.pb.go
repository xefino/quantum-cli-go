// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: protos/edge/money/v1/service.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	data "github.com/xefino/quantum-cli-go/data"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoneyManagementServiceClient is the client API for MoneyManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyManagementServiceClient interface {
	// GetName retrieves an identifier associated with the service, allowing the strategy runner to
	// uniquely identify it when multiple filter services are being referenced. It will return a
	// name result showing the address, ID and human-readable name of the filter service that processed
	// the original request.
	GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.NameResult, error)
	// ModifyOrder takes an existing order and modifies it with liquid asset management in mind. This
	// endpoint will be responsible for assigning lot sizes, and deviation with margin and account balance
	// in mind. This is done by taking the trade object from the ModifyOrderRequest object, making the
	// necessary modifications, and setting the associated field on the ModifyOrderResult object.
	ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderResult, error)
}

type moneyManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyManagementServiceClient(cc grpc.ClientConnInterface) MoneyManagementServiceClient {
	return &moneyManagementServiceClient{cc}
}

func (c *moneyManagementServiceClient) GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.NameResult, error) {
	out := new(data.NameResult)
	err := c.cc.Invoke(ctx, "/protos.edge.money.v1.MoneyManagementService/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyManagementServiceClient) ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderResult, error) {
	out := new(ModifyOrderResult)
	err := c.cc.Invoke(ctx, "/protos.edge.money.v1.MoneyManagementService/ModifyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyManagementServiceServer is the server API for MoneyManagementService service.
// All implementations must embed UnimplementedMoneyManagementServiceServer
// for forward compatibility
type MoneyManagementServiceServer interface {
	// GetName retrieves an identifier associated with the service, allowing the strategy runner to
	// uniquely identify it when multiple filter services are being referenced. It will return a
	// name result showing the address, ID and human-readable name of the filter service that processed
	// the original request.
	GetName(context.Context, *empty.Empty) (*data.NameResult, error)
	// ModifyOrder takes an existing order and modifies it with liquid asset management in mind. This
	// endpoint will be responsible for assigning lot sizes, and deviation with margin and account balance
	// in mind. This is done by taking the trade object from the ModifyOrderRequest object, making the
	// necessary modifications, and setting the associated field on the ModifyOrderResult object.
	ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderResult, error)
	mustEmbedUnimplementedMoneyManagementServiceServer()
}

// UnimplementedMoneyManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyManagementServiceServer struct {
}

func (UnimplementedMoneyManagementServiceServer) GetName(context.Context, *empty.Empty) (*data.NameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedMoneyManagementServiceServer) ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrder not implemented")
}
func (UnimplementedMoneyManagementServiceServer) mustEmbedUnimplementedMoneyManagementServiceServer() {
}

// UnsafeMoneyManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyManagementServiceServer will
// result in compilation errors.
type UnsafeMoneyManagementServiceServer interface {
	mustEmbedUnimplementedMoneyManagementServiceServer()
}

func RegisterMoneyManagementServiceServer(s grpc.ServiceRegistrar, srv MoneyManagementServiceServer) {
	s.RegisterService(&MoneyManagementService_ServiceDesc, srv)
}

func _MoneyManagementService_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyManagementServiceServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.edge.money.v1.MoneyManagementService/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyManagementServiceServer).GetName(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyManagementService_ModifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyManagementServiceServer).ModifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.edge.money.v1.MoneyManagementService/ModifyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyManagementServiceServer).ModifyOrder(ctx, req.(*ModifyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoneyManagementService_ServiceDesc is the grpc.ServiceDesc for MoneyManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.edge.money.v1.MoneyManagementService",
	HandlerType: (*MoneyManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _MoneyManagementService_GetName_Handler,
		},
		{
			MethodName: "ModifyOrder",
			Handler:    _MoneyManagementService_ModifyOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/edge/money/v1/service.proto",
}

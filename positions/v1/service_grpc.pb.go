// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: protos/edge/positions/v1/service.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	data "github.com/xefino/quantum-cli-go/data"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PositionManagementServiceClient is the client API for PositionManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionManagementServiceClient interface {
	// GetName retrieves an identifier associated with the service, allowing the strategy runner to
	// uniquely identify it when multiple position services are being referenced. It will return a
	// name result showing the address, ID and human-readable name of the position service that processed
	// the original request.
	GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.NameResult, error)
	// Enabled determines whether or not the service is enabled, allowing the strategy runner to skip
	// exit rules for all the positions at a given time.
	Enabled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.EnabledResult, error)
	// Calculate is used to do apriori calculations common to management of all positions for this particular
	// point in time. This function relies on the data contained in the PositionCalculationRequest object to
	// inform the calculation and the results are returned in the PositionCalculationResponse object.
	Calculate(ctx context.Context, in *PositionCalculationRequest, opts ...grpc.CallOption) (*PositionCalculationResponse, error)
	// ModifyPosition takes an existing position and modifies it. Note that this function is not inteded to
	// close an existing position or modify the volume of an existing position, but is rather intended to modify
	// secondary fields on the position, such as stop-loss, take-profit or associated limits. This is done by
	// taking the position, calculated fields and context from the PositionModificationRequest object, taking the
	// necessary modifications, and setting the associated TradeRequest on the PositionModificationResponse response.
	ModifyPosition(ctx context.Context, in *PositionModificationRequest, opts ...grpc.CallOption) (*PositionModificationResponse, error)
}

type positionManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionManagementServiceClient(cc grpc.ClientConnInterface) PositionManagementServiceClient {
	return &positionManagementServiceClient{cc}
}

func (c *positionManagementServiceClient) GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.NameResult, error) {
	out := new(data.NameResult)
	err := c.cc.Invoke(ctx, "/protos.edge.positions.v1.PositionManagementService/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionManagementServiceClient) Enabled(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*data.EnabledResult, error) {
	out := new(data.EnabledResult)
	err := c.cc.Invoke(ctx, "/protos.edge.positions.v1.PositionManagementService/Enabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionManagementServiceClient) Calculate(ctx context.Context, in *PositionCalculationRequest, opts ...grpc.CallOption) (*PositionCalculationResponse, error) {
	out := new(PositionCalculationResponse)
	err := c.cc.Invoke(ctx, "/protos.edge.positions.v1.PositionManagementService/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionManagementServiceClient) ModifyPosition(ctx context.Context, in *PositionModificationRequest, opts ...grpc.CallOption) (*PositionModificationResponse, error) {
	out := new(PositionModificationResponse)
	err := c.cc.Invoke(ctx, "/protos.edge.positions.v1.PositionManagementService/ModifyPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionManagementServiceServer is the server API for PositionManagementService service.
// All implementations must embed UnimplementedPositionManagementServiceServer
// for forward compatibility
type PositionManagementServiceServer interface {
	// GetName retrieves an identifier associated with the service, allowing the strategy runner to
	// uniquely identify it when multiple position services are being referenced. It will return a
	// name result showing the address, ID and human-readable name of the position service that processed
	// the original request.
	GetName(context.Context, *empty.Empty) (*data.NameResult, error)
	// Enabled determines whether or not the service is enabled, allowing the strategy runner to skip
	// exit rules for all the positions at a given time.
	Enabled(context.Context, *empty.Empty) (*data.EnabledResult, error)
	// Calculate is used to do apriori calculations common to management of all positions for this particular
	// point in time. This function relies on the data contained in the PositionCalculationRequest object to
	// inform the calculation and the results are returned in the PositionCalculationResponse object.
	Calculate(context.Context, *PositionCalculationRequest) (*PositionCalculationResponse, error)
	// ModifyPosition takes an existing position and modifies it. Note that this function is not inteded to
	// close an existing position or modify the volume of an existing position, but is rather intended to modify
	// secondary fields on the position, such as stop-loss, take-profit or associated limits. This is done by
	// taking the position, calculated fields and context from the PositionModificationRequest object, taking the
	// necessary modifications, and setting the associated TradeRequest on the PositionModificationResponse response.
	ModifyPosition(context.Context, *PositionModificationRequest) (*PositionModificationResponse, error)
	mustEmbedUnimplementedPositionManagementServiceServer()
}

// UnimplementedPositionManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPositionManagementServiceServer struct {
}

func (UnimplementedPositionManagementServiceServer) GetName(context.Context, *empty.Empty) (*data.NameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedPositionManagementServiceServer) Enabled(context.Context, *empty.Empty) (*data.EnabledResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enabled not implemented")
}
func (UnimplementedPositionManagementServiceServer) Calculate(context.Context, *PositionCalculationRequest) (*PositionCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedPositionManagementServiceServer) ModifyPosition(context.Context, *PositionModificationRequest) (*PositionModificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPosition not implemented")
}
func (UnimplementedPositionManagementServiceServer) mustEmbedUnimplementedPositionManagementServiceServer() {
}

// UnsafePositionManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionManagementServiceServer will
// result in compilation errors.
type UnsafePositionManagementServiceServer interface {
	mustEmbedUnimplementedPositionManagementServiceServer()
}

func RegisterPositionManagementServiceServer(s grpc.ServiceRegistrar, srv PositionManagementServiceServer) {
	s.RegisterService(&PositionManagementService_ServiceDesc, srv)
}

func _PositionManagementService_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionManagementServiceServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.edge.positions.v1.PositionManagementService/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionManagementServiceServer).GetName(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionManagementService_Enabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionManagementServiceServer).Enabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.edge.positions.v1.PositionManagementService/Enabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionManagementServiceServer).Enabled(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionManagementService_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionManagementServiceServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.edge.positions.v1.PositionManagementService/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionManagementServiceServer).Calculate(ctx, req.(*PositionCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionManagementService_ModifyPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionModificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionManagementServiceServer).ModifyPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.edge.positions.v1.PositionManagementService/ModifyPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionManagementServiceServer).ModifyPosition(ctx, req.(*PositionModificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PositionManagementService_ServiceDesc is the grpc.ServiceDesc for PositionManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PositionManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.edge.positions.v1.PositionManagementService",
	HandlerType: (*PositionManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _PositionManagementService_GetName_Handler,
		},
		{
			MethodName: "Enabled",
			Handler:    _PositionManagementService_Enabled_Handler,
		},
		{
			MethodName: "Calculate",
			Handler:    _PositionManagementService_Calculate_Handler,
		},
		{
			MethodName: "ModifyPosition",
			Handler:    _PositionManagementService_ModifyPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/edge/positions/v1/service.proto",
}
